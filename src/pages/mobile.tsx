/* eslint-disable @typescript-eslint/no-unsafe-argument */
/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-floating-promises */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */
/* eslint-disable @typescript-eslint/no-unsafe-call */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable react/no-unescaped-entities */
import { useSession, signOut } from "next-auth/react";
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect } from "react";
import { FileUploadInput } from "~/components/form/FIleUploadInput";
import { Button } from "~/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "~/components/ui/card";
import { Input } from "~/components/ui/input";
import { Label } from "~/components/ui/label";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "~/components/ui/tabs";
import { Inventory } from "./inventory";
import { Header } from "~/components/header";
import CounterPage from "./users/cashier";
import { api } from "~/utils/api";
import { Dashboard } from "./dashboard";
import { Orders } from "./orders";
import DashboardBalance from "~/components/dashboard/balance";
import DashboardMenu from "~/components/dashboard/dashboardMenuButton";
import ReceiveTransaction from "~/components/dashboard/receive";
import CashOutTransaction from "~/components/dashboard/cashout";
import CashInTransaction from "~/components/dashboard/cashin";
export default function POSTabs() {
  const { data: sessionData } = useSession();
  const router = useRouter();

  // useEffect(() => {
  //   if (!sessionData) router.push("/");
  // });
  const { data: item } = api.cashier.getAllItem.useQuery({ user_id: "12" });

  const {
    data: sales,
    isLoading,
    isError,
  } = api.cashier.getAllSales.useQuery({ user_id: "123" });

  
  const updateStatus = api.cashier.updateSalesStatus.useMutation();
  const handleClick = (sales_id:string) => {
    // Call the mutation function here
    console.log('success')
    updateStatus.mutate({
      sales_Id: sales_id,
      sales_status: true
    })


    
    
  };
  return (
    <>
      <Head>
        <title>Dashboard</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="flex min-h-screen flex-col bg-white text-primary-foreground dark:bg-[#121212]">
        <div className=" flex flex-col gap-2  py-3">
          {/* Header */}
          <Header />
          {/* Body */}
          <div className="container flex flex-col space-y-2">
            <Tabs defaultValue="pos" className="flex flex-col bg-transparent">
              <TabsList className=" flex w-80  justify-between self-center  bg-white text-[#979797] dark:bg-gradient-to-b dark:from-[#2e026d] dark:to-[#15162c] sm:w-96">
                <TabsTrigger className="rounded-full " value="pos">
                  POS
                </TabsTrigger>
                <TabsTrigger className="rounded-full" value="dashboard">
                  Dashboard
                </TabsTrigger>
                <TabsTrigger
                  onClick={() => {
                    sales;
                  }}
                  className="rounded-full"
                  value="orders"
                >
                  Orders
                </TabsTrigger>
                <TabsTrigger className="rounded-full" value="inventory">
                  Inventory
                </TabsTrigger>
              </TabsList>

              <TabsContent value="pos">
                {/* POS */}
                <CounterPage />
              </TabsContent>

              <TabsContent value="dashboard">         
                  {/* Balance */}
                  <DashboardBalance />

                  {/* Grid of buttons */}
                  <DashboardMenu />
                  {/* Powered by Splitscale */}
                  <div className="grid h-14 grid-cols-4 rounded-md bg-black">
                    <div className="col-span-1 ml-2 mt-1 text-xs">
                      Powered by
                    </div>
                    <div className="col-span-3 flex items-center text-lg font-semibold">
                      Splitscale Systems
                    </div>
                  </div>
                  {/* Invoice */}
                  <div className="mt-3 flex flex-col rounded-md bg-[#D9D9D9] p-3 text-black">
                    {/* Transaction */}
                    <div className="grid grid-cols-2">
                      <div className="font-semibold">Transactions</div>
                      <div className="text-end text-xs text-[#FC7070]">
                        See all
                      </div>
                    </div>
                    {/* Receive */}
                    <ReceiveTransaction />
                    {/* Cash out */}
                    <CashOutTransaction />
                    {/* Cash in */}
                    <CashInTransaction />
                  </div>
             
              </TabsContent>
        
               <TabsContent value="orders" className="grid justify-items-center">
                {sales?.map((sales, index) => (
                  
                  <div key={index}>
                    <Card className="mb-3 w-64 border border-black">
                      <CardHeader className="grid">
                        <CardTitle className="mb-2">
                          {sales.customer_name}
                        </CardTitle>

                        {sales.itemOrders.map((item) => (
                          <div key={index}>
                            <Card className="bg-gray-300 px-3 py-2  ">
                              <div className="grid grid-cols-2 gap-0">
                                <div className="w-full self-center text-left font-bold">
                                  {item.quantity}x {item.name}
                                </div>
                                <div className="self-center text-right font-bold"></div>
                                <div className="self-center text-left">
                                  {item.comment}
                                </div>
                              </div>
                            </Card>
                          </div>
                        ))}
                        <div className="rounded-md bg-blue-950 text-center text-white"
                        onClick={()=>{
                          handleClick(sales.sales_Id)
                          window.location.reload();
                        }}
                        >
                          DONE
                        </div>
                      </CardHeader>
                    </Card>
                  </div>
                ))}
              </TabsContent>

              <TabsContent value="inventory">
                <Inventory card={item} />
              </TabsContent>
            </Tabs>
          </div>
        </div>
      </main>
    </>
  );
}
